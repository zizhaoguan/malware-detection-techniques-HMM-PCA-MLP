// PCA.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <fstream>
#include "Eigen/Dense"
#include <String>

using namespace std;
using namespace Eigen;

void computeCov(MatrixXd&, MatrixXd&);
void computeAMatrix(MatrixXd&, MatrixXd&);
void computeC(MatrixXd&, MatrixXd&, int);
void computeEigen(MatrixXd&, MatrixXd&, MatrixXd&);
int computeDim(MatrixXd&);
void computeScoreMatrix(MatrixXd&, MatrixXd&, MatrixXd&);
void computeYMatrix(MatrixXd&, MatrixXd&);
void scoring(MatrixXd& , MatrixXd& , MatrixXd& , MatrixXd&);


int main()
{
	ifstream readFile;
	ofstream writeFile;

	const int m = 16;// m measurements/features
	const int n = 20;// n experiments/samples 

	MatrixXd A(m, n);
	MatrixXd C(m, m);
	MatrixXd mean;

	/*for (int i = 0; i < 16; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			 A(i, j)=1;
		}
	}*/
	
	char readFileName[10];
	for (int j = 0; j < n; j++)
	{
		sprintf_s(readFileName, "%d.txt", j+1);    //read the value from each training set to form each colummn(experiment)
		cout << readFileName << endl;
		readFile.open(readFileName, ios::in);
		if (!readFile)
		{
			cout << "cannot open" << endl;
		}
		for (int i = 0; i < m; i++)
		{
			readFile >> A(i, j);
		}
		readFile.close();
	}

	for (int i = 0; i < m; i++)
	{
		cout << i + 1 << " : ";
		for (int j = 0; j < n; j++)
		{
			cout << A(i, j) << " ";
		}

		cout << '\n'<<'\n';
	}

	//get A matrix
	computeAMatrix(A, mean);

	cout << "what file name for A matrix do you want?" << endl;
	string writeFileName;
	cin >> writeFileName;
	writeFile.open(writeFileName, ios::out);

	for (int i = 0; i < m; i++)
	{
		writeFile<< i + 1 << " : ";
		cout << i + 1 << " : ";
		for (int j = 0; j < n; j++)
		{
			writeFile << A(i, j) << " ";
			cout << A(i, j) << " ";
		}
		writeFile << '\n' << '\n';
		cout << '\n' << '\n';
	}
	writeFile.close();

	cout << "what file name for C matrix do you want?" << endl;
	cin >> writeFileName;
	writeFile.open(writeFileName, ios::out);

	//get C matrix
	computeC(A, C, n);
	writeFile << "C = " << endl;
	cout << "C = " << endl;
	for (int i = 0; i < m; i++)
	{
		writeFile << i + 1 << " : ";
		cout << i + 1 << " : ";
		for (int j = 0; j < m; j++)
		{
			writeFile << C(i, j) << " ";
			cout << C(i, j) << " ";
		}
		writeFile << '\n' << '\n';
		cout << '\n' << '\n';
	}
	writeFile.close();
	MatrixXd eigenVec, eigenVal;

	//get eigenvector and eigenvalue
	computeEigen(C, eigenVec, eigenVal);

	writeFile.open("eigenvector.txt", ios::out);
	writeFile<< eigenVec << endl;
	cout << "eigenvector =" << endl;
	cout << eigenVec <<endl<<endl;
	writeFile.close();

	writeFile.open("eigenvalue.txt", ios::out);
	writeFile << eigenVal << endl;
	cout << "eigenvalue = " << endl;
	cout << eigenVal<<endl<<endl;
	writeFile.close();

	//get how many dimensions should be discard
	int dim = computeDim(eigenVal);
	MatrixXd U = eigenVec.rightCols(dim);  //get the eigenvector matrix after discarding the less significant eigenvectors

	cout << "after discarding the less significant eigenvectors\n eigenvector = " << endl;
	cout << U << endl << endl;
	//get the scoring matrix
	MatrixXd delta;
	computeScoreMatrix(A, U, delta);
	

	writeFile.open("scoring matrix.txt", ios::out);
	writeFile << delta << endl;
	cout << "score matrix = " << endl;
	cout << delta << endl;
	writeFile.close();

	int count = 0;
	string anotherRFileName;
	MatrixXd Y(m, 1);
	MatrixXd W;
	while (count < 30)
	{
		cout << "which file do you want to score?\n";
		cin >> anotherRFileName;
		readFile.open(anotherRFileName, ios::in);
		while (!readFile)
		{
			cout << "the file name is incorrect...type it again\n";
			cin >> anotherRFileName;
			readFile.open(anotherRFileName, ios::in);
		}
		for (int i = 0; i < m; i++) { readFile >> Y(i, 0); }
		computeYMatrix(Y, mean);
		scoring(Y, U, W, delta);
		readFile.close();
	}

}

void computeAMatrix(MatrixXd& A, MatrixXd& mean)
{
	mean = A.rowwise().mean(); //obtain the mean of each row to form a 16*1 matrix
	RowVectorXd meanRow = mean.transpose(); //make the 16*1 matrix to become row vector
	A.colwise() -=meanRow.transpose();//make the row vector to become column vector, then each column minus the column vector
}
void computeCov(MatrixXd& A, MatrixXd& C)
{
	C = A * A.adjoint();
}
void computeC(MatrixXd& A, MatrixXd& C, int n)
{
	C = A * A.adjoint();
	C = C / n;
}

void computeEigen(MatrixXd& C, MatrixXd& eigenVec, MatrixXd& eigenVal)
{
	SelfAdjointEigenSolver<MatrixXd> eig(C);
	eigenVec = eig.eigenvectors();
	eigenVal = eig.eigenvalues();
}

int computeDim(MatrixXd& eigenVal)
{
	int dim;
	double sum = 0;
	for (int i = eigenVal.rows() - 1; i >= 0; i--)
	{
		sum += eigenVal(i, 0);
		dim = i;
		if (sum / eigenVal.sum() >= 0.95) { break; }
	}
	return eigenVal.rows() - dim;
}

void computeScoreMatrix(MatrixXd& A, MatrixXd& U, MatrixXd& delta)
{
	delta = U.transpose()* A;
}

void computeYMatrix(MatrixXd& Y, MatrixXd& mean)
{
	RowVectorXd meanRow = mean.transpose(); //make the 16*1 matrix to become row vector
	Y.colwise() -= meanRow.transpose();//make the row vector to become column vector, then each column minus the column vector
}

void scoring(MatrixXd& Y, MatrixXd& U, MatrixXd& W, MatrixXd& delta)
{
	W = U.transpose() * Y;
	double sum;
	double dist;
	double minDist = 1000.000;
	for (int j = 0; j < delta.cols(); j++)
	{
		sum = 0.000;
		for (int i = 0; i < delta.rows(); i++)
		{
			sum = pow(delta(i, j) - W(i, 0), 2) + sum;
		}
		dist = sqrt(sum);
		cout << "the " << j + 1 << " distance is: " << dist << endl;
		if (dist < minDist)
		{
			minDist = dist;
		}
	}
	cout << " the minimum distance = " << minDist << endl;
}