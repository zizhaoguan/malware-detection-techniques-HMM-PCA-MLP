// SGD_MLP.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include "Sample.h"
#include <fstream>
#include <cmath>
#include <Windows.h>
#include <String>

using namespace std;

float SGD(float& , float& , float& , float& , float& , float& , Sample* );
float SGDWithoutUpdatW(float, float, float, float, float, float, Sample*);
float computeY(float, float, float, float, float, float, Sample*);

int main()
{
	int numOfTrainSet;
	cout << "how many training data do you have?\n";
	cin >> numOfTrainSet;

	Sample** samplePtr = new Sample*[numOfTrainSet];

	fstream readFile;
	readFile.open("training sample.txt", ios::in);
	string fileName;
	while (!readFile)
	{
		cout << "file name is wrong\nType it again\n"; 
		cin >> fileName;
		readFile.open("fileName", ios::in);
	}
	
	float x0, x1;
	int z;
	int i;
	for (i = 0; i < numOfTrainSet; i++)
	{
		readFile >> x0;
		readFile >> x1;
		readFile >> z;
		samplePtr[i] = new Sample(x0, x1, z);
	}

	for (i = 0; i < numOfTrainSet; i++)
	{
		cout << "X0 = " << samplePtr[i]->getXZero() << "   X1 = " << samplePtr[i]->getXOne() <<
			"   Z = " << samplePtr[i]->getZ()<<endl;
	}
	readFile.close();
	float w0 = 1;
	float w1 = 2;
	float w2 = -1;
	float w3 = 1;
	float w4 = -2;
	float w5 = 1;

	float error;
	int count = 0;
	while (count < 10000)
	{
		for (i = 0; i < numOfTrainSet; i++)
		{
			error = SGD(w0, w1, w2, w3, w4, w5, samplePtr[i]);
		}
		count++;
		cout << "error E[w]= " << error << endl;
		//Sleep(500);
	}
	cout << "w0 = " << w0 << "  w1 = " << w1 << "  w2 = " << w2 << "  w3 = " << w3 << "  w4 = " << w4
		<< "  w5 = " << w5 << endl;

	float* YArr = new float[numOfTrainSet];
	for (i = 0; i < numOfTrainSet; i++)
	{
		YArr[i] =computeY(w0, w1, w2, w3, w4, w5, samplePtr[i]);
		cout << " Y[" << i << "] = " << YArr[i]<<endl;
	}
	/*cout << "\nw0 = " << w0 << "  w1 = " << w1 << "  w2 = " << w2 << "  w3 = " << w3 << "  w4 = " << w4
		<< "  w5 = " << w5 << endl;*/
	cout << "press any key to continue compute training set\n";
	system("pause");

	//numOfTrainSet = 15;

	int numOfTestSet;
	cout << "How many test sets do you have?\n";
	cin >> numOfTestSet;
	Sample** testSamplePtr = new Sample * [numOfTestSet];

	readFile.open("test sample.txt", ios::in);
	if (!readFile) { cout << "file name is wrong\n"; }
	
	for (i = 0; i < numOfTestSet; i++)
	{
		readFile >> x0;
		readFile >> x1;
		readFile >> z;
		testSamplePtr[i] = new Sample(x0, x1, z);
	}

	readFile.close();

	float* testYArr = new float[numOfTestSet];
	for (i = 0; i < numOfTestSet; i++)
	{
		testYArr[i] = computeY(w0, w1, w2, w3, w4, w5, testSamplePtr[i]);
		cout << " test sample Y[" << i << "] = " << testYArr[i] << endl;
	}

	cout << "\nw0 = " << w0 << "  w1 = " << w1 << "  w2 = " << w2 << "  w3 = " << w3 << "  w4 = " << w4
		<< "  w5 = " << w5 << endl;

	system("pause");

	delete[]* samplePtr;
	samplePtr = NULL;
	
	delete[] YArr;
	YArr = NULL;

	delete[] * testSamplePtr;
	testSamplePtr = NULL;

	delete[] testYArr;
	testYArr = NULL;
}

float SGD(float& w0, float& w1, float& w2, float& w3, float& w4, float& w5, Sample* a)  //return the error E(w)
{
	float z;
	float v0 = w0;
	float v1 = w1;
	float v2 = w2;
	float v3 = w3;
	float v4 = w4;
	float v5 = w5;
	float v6 = (a->getXZero()) * v0 + (a->getXOne()) * v2;
	float v7= (a->getXZero()) * v1 + (a->getXOne()) * v3;
	float v8 = 1 + exp(- v6);
	float v9 = 1 + exp(-v7);
	float v10 = v4 / v8;
	float v11 = v5 / v9;
	float v12 = (v10 + v11 - (a->getZ())) * (v10 + v11 - (a->getZ())) / 2 ;
	//float v12 = pow((v10 + v11 - (a->getZ())), 2) / 2;
	z = v12;

	float dz = 1;
	float dv12 = dz;
	float dv11 = v10 + v11 - (a->getZ());
	float dv10 = v10 + v11 - (a->getZ());
	float dv9 = ((-v5) / (v9 * v9)) * dv11;
	float dv8 = ((-v4) / (v8 * v8)) * dv10;

	//float dv9 = ((-v5) / pow(v9 ,2)) * dv11;
	//float dv8 = ((-v4) / pow(v8, 2)) * dv10;

	float dv7 = (-exp(-v7)) * dv9;
	float dv6 = (-exp(-v6)) * dv8;
	float dv5 = dv11 / v9;
	float dv4 = dv10 / v8;
	float dv3 = (a->getXOne()) * dv7;
	float dv2 = (a->getXOne()) * dv6;
	float dv1 = (a->getXZero()) * dv7;
	float dv0 = (a->getXZero()) * dv6;

	float alpha = 0.1;
	w0 = w0 - alpha * dv0;
	w1 = w1 - alpha * dv1;
	w2 = w2 - alpha * dv2;
	w3 = w3- alpha * dv3;
	w4 = w4 - alpha * dv4;
	w5 = w5 - alpha * dv5;
	return z;
}

float SGDWithoutUpdatW(float w0, float w1, float w2, float w3, float w4, float w5, Sample* a) //return the error E(w)
{
	float z;
	float v0 = w0;
	float v1 = w1;
	float v2 = w2;
	float v3 = w3;
	float v4 = w4;
	float v5 = w5;
	float v6 = (a->getXZero()) * v0 + (a->getXOne()) * v2;
	float v7 = (a->getXZero()) * v1 + (a->getXOne()) * v3;
	float v8 = 1 + exp(-v6);
	float v9 = 1 + exp(-v7);
	float v10 = v4 / v8;
	float v11 = v5 / v9;
	float v12 = (v10 + v11 - (a->getZ())) * (v10 + v11 - (a->getZ())) / 2;
	//float v12 = pow((v10 + v11 - (a->getZ())), 2) / 2;
	z = v12;

	float dz = 1;
	float dv12 = dz;
	float dv11 = v10 + v11 - (a->getZ());
	float dv10 = v10 + v11 - (a->getZ());
	float dv9 = ((-v5) / (v9 * v9)) * dv11;
	float dv8 = ((-v4) / (v8 * v8)) * dv10;

	//float dv9 = ((-v5) / pow(v9 ,2)) * dv11;
	//float dv8 = ((-v4) / pow(v8, 2)) * dv10;

	float dv7 = (-exp(-v7)) * dv9;
	float dv6 = (-exp(-v6)) * dv8;
	float dv5 = dv11 / v9;
	float dv4 = dv10 / v8;
	float dv3 = (a->getXOne()) * dv7;
	float dv2 = (a->getXOne()) * dv6;
	float dv1 = (a->getXZero()) * dv7;
	float dv0 = (a->getXZero()) * dv6;

	float alpha = 0.1;
	w0 = w0 - alpha * dv0;
	w1 = w1 - alpha * dv1;
	w2 = w2 - alpha * dv2;
	w3 = w3 - alpha * dv3;
	w4 = w4 - alpha * dv4;
	w5 = w5 - alpha * dv5;
	return z;
}

float computeY(float w0, float w1, float w2, float w3, float w4, float w5, Sample* a) //compute Y
{
	float z;
	float v0 = w0;
	float v1 = w1;
	float v2 = w2;
	float v3 = w3;
	float v4 = w4;
	float v5 = w5;
	float v6 = (a->getXZero()) * v0 + (a->getXOne()) * v2;
	float v7 = (a->getXZero()) * v1 + (a->getXOne()) * v3;
	float v8 = 1 + exp(-v6);
	float v9 = 1 + exp(-v7);
	float v10 = v4 / v8;
	float v11 = v5 / v9;
	z = v10 + v11;
	return z;
}

